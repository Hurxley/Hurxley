#include<stdio.h>
#include<iostream>
using namespace std;
//函数结果状态代码
#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define INFEASIBLE -1
#define OVERFLOW -2
#define MAXSIZE 100
//Status 是函数的类型，其值是函数结果状态代码
typedef int Status;
typedef char ElemType;
//定义顺序表类型
typedef struct{
	ElemType* elem;
	int length;
}SqList;
//顺序表L的出初始化
Status initList_Sq(SqList& L) {    //构造一个空的顺序表L
	L.elem = new ElemType[MAXSIZE];     //为顺序表分配内存
	if (!L.elem)exit(OVERFLOW);        //储存分配失败
	L.length = 0;                       //空表长度为0
	return OK;
}
//销毁线性表
void DestroyList(SqList& L) {
	if (L.elem) delete L.elem;         //释放储存空间
}
//清空线性表
void ClearList(SqList& L) {
	L.length = 0;                     //将线性表的长度置为0
}
//求线性表L的长度
int Getlength(SqList L) {
	return L.length;
}
//判断线性表是否为空
int ListEmpty(SqList L)
{
	if (L.length == 0)
		return TRUE;
	else return FALSE;
} 
//顺序表的取值（根据位置i获取相应位置数据元素的内容）
int GetElem(SqList L, int i, ElemType& e) {
	if (i < 1 || i>L.length)return ERROR;  //判断i的值是否合理，若不合理，返回ERROR
	e = L.elem[i - 1];
	return OK;
}
//顺序表的查找
int LocateElem(SqList L, ElemType e) {  //在顺序表L中查找值为e的数据元素，返回其序号（是第几个元素）
	for (int i = 0; i < L.length; i++)
		if (L.elem[i] == e) return i + 1;   //查找成功，返回序号
	return 0; // 查找失败，返回0
}
//顺序表的删除
int ListDelete_Sq(SqList &L,int i)
{
	if (i < 1 || i>L.length)return ERROR;//判断i的值是否合理，若不合理，返回ERROR
	for (int j = i; j <= L.length; j++)
		L.elem[j - 1] = L.elem[j];     //被删除的元素之后的元素前移
	L.length--;                       //表长减一
	return OK;
}
//顺序表的插入
int Listinsert_Sq(SqList& L, int i, ElemType e)
{
	if (i < 1 || i>L.length+1)return ERROR;//判断i的值是否合理，若不合理，返回ERROR
	if (L.length == MAXSIZE)return ERROR; //当前储存空间已满
	for(int j=L.length-1;j>=i-1;j--)
		L.elem[j + 1] = L.elem[j];      //插入位置及之后的元素后移
	L.elem[i - 1] = e;                  //将新元素e放入第i个位置
	L.length++;                              //表长加一
	return OK;
}
